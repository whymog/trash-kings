{"version":3,"sources":["allocate.js","getters.js","breeding.js","global-variables.js","helpers.js","map.js","messages.js","progress-bar.js","raccoon-names.js","raccoons.js","game.js"],"names":[],"mappingshrIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpfile":"app.js","sourcesContent":["var allocate = function(e) {\n\tvar assignment = e.target.dataset.assignment,\n\t\taction = e.target.classList[0];\n\n\tif (action === \"decrementAssignees\") {\n\t\t// First, check to make sure there's at least one assignee\n\t\tif (getAssignments(assignment).length < 1) {\n\t\t\tvar errorMsg = new Message( { message: \"Unable to decrement - no raccoons currently assigned\" } );\n\t\t\treturn errorMsg;\n\t\t}\n\n\t\tfor (var i = 0; i < raccoons.length; i++) {\n\t\t\tif (raccoons[i].assignment === assignment) {\n\t\t\t\traccoons[i].assignment = \"unassigned\";\n\t\t\t\tupdateAllocationLabels(assignment);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t} else if (action === \"incrementAssignees\") {\n\t\t// First, check to make sure there's at least one unassigned raccoon\n\t\tif (getAssignments(\"unassigned\").length <= getChildRaccoons().length) {\n\t\t\tvar errorMsg = new Message( {message: \"Unable to allocate - all racccoons are currently assigned\" } );\n\t\t\treturn errorMsg;\n\t\t}\n\t\t// Next, find the first unassigned raccoon and assign to this task\n\t\tfor (var i = 0; i < raccoons.length; i++) {\n\t\t\tif (raccoons[i].assignment === \"unassigned\" && getAge(raccoons[i]) > new Date(\"January 1, 1971\")) {\n\t\t\t\traccoons[i].assignment = assignment;\n\t\t\t\tupdateAllocationLabels(assignment);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\tconsole.log(e);\n\tconsole.log(e.target.dataset.assignment);\n\tconsole.log(e.target.classList[0]);\n}\n\nvar updateAllocationLabels = function(assignment) {\n\t// Finally, update the appropriate label span so we don't have\n\t// to check every time tick() fires (that was a bad and\n\t// unsustainable method anyway)\n\tif (assignment !== \"unassigned\") {\n\t\t$('span[data-assignment=' + assignment + ']').html(getAssignments(assignment).length);\n\t}\n\t$('.numUnassigned').html(getAssignments(\"unassigned\").length + \" raccoons are unassigned\");\n}","\"use strict\";\n\n/**** Math getters ****/\n\nconst getAge = raccoon => Math.abs(date - raccoon.birthday);\n\nconst isAdult = raccoon => getAge(raccoon) >= new Date(\"January 1, 1971\") ?\n\ttrue :\n\tfalse;\n\nconst getTotalRaccoons = () => raccoons.length;\n\nconst getAdultRaccoons = () => {\n\tconst adults = [];\n\n\traccoons.forEach(raccoon => {\n\t\tif (isAdult(raccoon)) { // One year old\n\t\t\tadults.push(raccoon);\n\t\t}\n\t});\n\n\treturn adults;\n}\n\nconst getChildRaccoons = () => {\n\tconst children = [];\n\n\traccoons.forEach(raccoon => {\n\t\tif (!isAdult(raccoon)) {\n\t\t\tchildren.push(raccoon);\n\t\t}\n\t});\n\n\treturn children;\n}\n\nconst getMaleRaccoons = () => {\n\tconst males = [];\n\n\traccoons.forEach(raccoon => {\n\t\tif (raccoon.sex === \"male\") {\n\t\t\tmales.push(raccoon);\n\t\t}\n\t});\n\n\treturn males;\n}\n\nconst getFemaleRaccoons = () => {\n\tconst females = [];\n\n\traccoons.forEach(raccoon => {\n\t\tif (raccoon.sex === \"female\") {\n\t\t\tfemales.push(raccoon);\n\t\t}\n\t});\n\n\treturn females;\n}\n\nconst getAdultMaleRaccoons = () => {\n\tconst adultMales = [];\n\n\traccoons.forEach(raccoon => {\n\t\tif (raccoon.sex === \"male\" && isAdult(raccoon)) {\n\t\t\tadultMales.push(raccoon);\n\t\t}\n\t});\n\n\treturn adultMales;\n}\n\nconst getAdultFemaleRaccoons = function() {\n\tconst adultFemales = [];\n\n\traccoons.forEach(raccoon => {\n\t\tif (raccoon.sex === \"female\" && isAdult(raccoon)) {\n\t\t\tadultFemales.push(raccoon);\n\t\t}\n\t});\n\n\treturn adultFemales;\n}\n\nconst getChildMaleRaccoons = () => {\n\tvar childMales = [];\n\n\traccoons.forEach(raccoon => {\n\t\tif (raccoon.sex === \"male\" && !isAdult(raccoon)) {\n\t\t\tchildMales.push(raccoon);\n\t\t}\n\t});\n\n\treturn childMales;\n}\n\nconst getChildFemaleRaccoons = function() {\n\tvar childFemales = [];\n\n\traccoons.forEach(raccoon => {\n\t\tif (raccoon.sex === \"female\" && !isAdult(raccoon)) {\n\t\t\tchildFemales.push(raccoon);\n\t\t}\n\t});\n\n\treturn childFemales;\n}\n\n// Assignments\n\n/**\n * If no assignment is specified, return an object containing all assignments\n * and the number of raccoons assigned to each.\n * If an assignment _is_ specified, just return the raccoons with that\n * assignment.\n * @param {string} assignment - the name of the job assignment\n */\nconst getAssignments = assignment => {\n\tif (assignment) {\n\t\tconst assignedRaccoons = [];\n\n\t\traccoons.forEach(raccoon => {\n\t\t\tif (raccoon.assignment === assignment) {\n\t\t\t\tassignedRaccoons.push(raccoon);\n\t\t\t}\n\t\t});\n\n\t\treturn assignedRaccoons;\n\t}\n\n\t// Or if no assignment is specified...\n\telse {\n\t\t// TODO: Move jobs out into its own class, because jobs will probably have\n\t\t// variables associated with them at some point. Defining them here is\n\t\t// pretty bad tbh\n\n\t\tconst jobs = [ \"unassigned\", \"gatherTwigs\", \"gatherFood\" ];\n\t\tconst assignments = {};\n\n\t\tjobs.map(job => assignments[job] = []);\n\n\t\tjobs.forEach(job => {\n\t\t\traccoons.forEach(raccoon => {\n\t\t\t\tif (raccoon.assignment === job) {\n\t\t\t\t\tassignments[job].push(raccoon);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\treturn assignments;\n\t}\n}\n\n// Date and Time\n\nconst getHoursMinutesString = date => {\n\tconst hours = date.getHours();\n\tconst minutes = date.getMinutes() < 10 ? \"0\" + date.getMinutes() : date.getMinutes();\n\tconst amOrPm = date.getHours() < 12 ? \"a.m.\" : \"p.m.\";\n\n\treturn String(`${hours}:${minutes} ${amOrPm}`);\n}\n\nconst getMonthName = month => monthNames[month];\n\nconst getSeason = date => {\n\tif (\n\t\t(date.getMonth() === 11 && date.getDate() >= 21) ||\n\t\t(date.getMonth() < 2) ||\n\t\t(date.getMonth() === 2 && date.getDate() <= 19)\n\t) {\n\t\treturn \"Winter\";\n\t} else if (\n\t\t(date.getMonth() === 2 && date.getDate() >= 20) ||\n\t\t(date.getMonth() > 2 && date.getMonth() < 6) ||\n\t\t(date.getMonth() === 5 && date.getDate() <= 20)\n\t) {\n\t\treturn \"Spring\";\n\t} else if (\n\t\t(date.getMonth() === 5 && date.getDate() >= 21) ||\n\t\t(date.getMonth() > 5 && date.getMonth() < 8) ||\n\t\t(date.getMonth() === 8 && date.getDate() <= 21)\n\t) {\n\t\treturn \"Summer\";\n\t} else {\n\t\treturn \"Fall\";\n\t}\n}\n\n// Resources\n\n// TODO: Refactor each of these into a single generic getter that takes a\n// resource as a parameter\n\nconst getRateOfChangeFood = () => {\n\tconst foodIncreaseRate = Number(foodGatherRate * minutesPerTick * getAssignments('gatherFood').length);\n\tconst foodDecreaseRate = Number((foodGatherRate / 10) * minutesPerTick * getTotalRaccoons());\n\tconst hasDeficit = foodIncreaseRate < foodDecreaseRate ? true : false;\n\n\treturn `${hasDeficit ? \"\" : \"+\"}${(foodIncreaseRate - foodDecreaseRate).toFixed(2)}`\n}\n\nconst getRateOfChangeTwigs = () => {\n\tconst twigsIncreaseRate = Number(twigsGatherRate * minutesPerTick * getAssignments('gatherTwigs').length);\n\treturn `${twigsIncreaseRate > 0 ? \"+\" : \"\"}${twigsIncreaseRate.toFixed(2)}`;\n}\n\n/**** End getters *****/\n","/********* Actions **********/\n\nvar breedRaccoons = function() {\n\tif (bredThisYear) {\n\t\tconsole.log(\"Can't breed — already bred this year!\");\n\t\treturn;\n\t} else if (currentlyBreeding) {\n\t\tconsole.log(\"Breeding already in progress.\");\n\t\treturn;\n\t}\n\n\t//  Breeding process:\n\t// 1. Set bredThisYear to true;\n\tbredThisYear = true;\n\n\t// 2. Assign Mating Pairs\n\t// \t2.a. Get the lower result of getAdultMales().length and getAdultFemaleRaccoons().length; this is the number of breeding pairs\n\tvar females = getAdultFemaleRaccoons();\n\tvar males = getAdultMaleRaccoons();\n\tvar numberOfBreedingPairs = getAdultFemaleRaccoons().length > getAdultMaleRaccoons().length ? \n\t\tgetAdultMaleRaccoons().length : getAdultFemaleRaccoons().length;\n\n\tconsole.log(\"Breeding pairs:\", numberOfBreedingPairs, \"Males:\", getAdultMaleRaccoons().length, \"Females:\", getAdultFemaleRaccoons().length);\n\n\t// \t2.b. If breedingPairs < getAdultFemaleRaccoons().length, randomly choose breedingPairs# of adult females to set as pregnant\n\n\tif (numberOfBreedingPairs === females.length) {\n\t\tfor (var i = 0; i < raccoons.length; i ++) {\n\t\t\tif (raccoons[i].sex === \"female\" && getAge(raccoons[i]) >= 365) {\n\t\t\t\traccoons[i].pregnant = true;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tvar indicesOfAdultFemales = [];\n\n\t\t// Get the indices of every eligible adult female\n\t\tfor (var i = 0; i < raccoons.length; i ++) {\n\t\t\tif (raccoons[i].sex === \"female\" && getAge(raccoons[i]) >= 365) {\n\t\t\t\tindicesOfAdultFemales.push(i);\n\t\t\t}\n\t\t}\n\t\tconsole.log(indicesOfAdultFemales);\n\n\t\t// Now randomize the order of the array\n\t\tshuffle(indicesOfAdultFemales);\n\n\t\tconsole.log(indicesOfAdultFemales);\n\n\t\t// Finally, change each raccoon at each index to pregnant until the number of breeding pairs is reached\n\n\t\tfor (var i = 0; i < numberOfBreedingPairs; i ++) {\n\t\t\traccoons[indicesOfAdultFemales[i]].pregnant = true;\n\t\t}\n\n\t\tconsole.log(raccoons);\n\t}\n\n\tcurrentlyBreeding = true;\n\n\t// 3. Instantiate a breeding countdown bar (~62 days for simplicity's sake)'\n\tvar breedBar = new ProgressBar(\"breedBar\", 89280);\n\tvar breedMsg = new Message({\n\t\tmessage: \"Raccoons have bred. Now...we wait.\"\n\t});\n\tbreedBar.addToDOM();\n\n\t// THE BELOW SHOULD BE MOVED TO A SEPARATE FUNCTION THAT'S CALLED WHEN THE TIMER ABOVE ENDS\n}\n\nvar spawnBabyRaccoons = function() {\n\t// When countdown ends:\n\t// \t1. Find all pregnant adult females who are still alive and toss them into an array\n\t//\t2. For each alive pregnant female, create a random number of new children - add them into a temporary array\n\t//\t\t(raccoons have on average 3-4 offspring per litter, ranging from 1-7)\n\t//\t3. Take the result of #4.b and roll sex of each child (let's say 50/50 chance male/female)\n\t//\t4. Add each new child into raccoons[]; continue loop\n\n\tvar adultFemales = getAdultFemaleRaccoons();\n\tvar mothers = 0;\n\tvar babies = [];\n\n\tfor (var i = 0; i < adultFemales.length; i++) {\n\t\tvar currentID = adultFemales[i].id;\n\t\tif(raccoons[currentID].alive && raccoons[currentID].pregnant) {\n\t\t\tmothers++;\n\t\t\traccoons[currentID].pregnant = false;\n\t\t}\n\t}\n\tconsole.log(mothers);\n\n\tfor (var i = 0; i < mothers; i++) {\n\t\tvar litter = Math.floor(Math.random() * 7 + 1);\n\t\tfor (var j = 0; j < litter; j++) {\n\t\t\tvar newID = raccoons.length;\n\n\t\t\tvar newRaccoon = {\n\t\t\t\tid: newID,\n\t\t\t\tsex: Math.random() > 0.5 ? \"female\" : \"male\",\n\t\t\t\tbirthday: date,\n\t\t\t\tpregnant: false,\n\t\t\t\tassignment: \"unassigned\",\n\t\t\t\talive: true\n\t\t\t};\n\n\t\t\t// Get the name from the list of possible options\n\t\t\tnewRaccoon.name = assignName(newRaccoon.sex);\n\n\t\t\tconsole.log(newRaccoon);\n\n\t\t\tbabies.push(newRaccoon);\n\t\t\traccoons.push(newRaccoon);\n\t\t\tconsole.log(newRaccoon);\n\t\t}\n\t}\n\n\tvar babyDetails = [];\n\tfor (var i = 0; i < babies.length; i++) {\n\t\tbabyDetails.push({\n\t\t\tname: babies[i].name,\n\t\t\tsex: babies[i].sex,\n\t\t});\n\t}\n\n\tvar birthMsg = new Message({\n\t\tmessage: \"<span class='messageTooltip'>\" + babies.length + \"</span> babies were born!\",\n\t\ttooltip: babyDetails\n\t});\n\n\t$(\"#breedBar .progressBar\").fadeOut(5000, function () {\n\t\t$(\"#breedBar .progressBar\").remove();\n\t});\n}\n\n/******** End Actions *******/","/****** GLOBAL VARIABLES ******/\nvar tickRate = 500;\nvar minutesPerTick = 60;\n\nvar humans = 318900000;\n\nvar sizeOfUnitedStates = 3537436; // square miles\nvar raccoonTerritory = 1; // square miles\nvar humanTerritory = sizeOfUnitedStates - raccoonTerritory;\n\nvar foodStores = 10,\n\ttwigStores = 0;\n\nvar foodGatherRate = 0.001,\n\t\ttwigsGatherRate = 0.001;\n\nvar humanGrowthRate = 5; // 7,855 net humans gained in the US per day; let's approximate to 5 per minute\n\nvar startingDate = new Date(\"December 20, 2017 6:00:00\"),\n\tdate = startingDate;\n\nvar currentSeason;\n\n/** Breeding variables **/\n\nvar bredThisYear = false,\n\tcurrentlyBreeding = false;\n\nvar breedTimeRequired = 86400,\n\tbreedTimeElapsed = 0;\n\n/** jQuery variables **/\n\nvar $statsPane,\n\t$actionsPane;\n\n/**** END GLOBAL VARIABLES ****/\n","/**** Sorters and Helpers ****/\n\nconst getRandomFromArray = array => {\n\treturn array[Math.floor(Math.random() * array.length)];\n}\n\nvar monthNames = [\n\t\"January\",\n\t\"February\",\n\t\"March\",\n\t\"April\",\n\t\"May\",\n\t\"June\",\n\t\"July\",\n\t\"August\",\n\t\"September\",\n\t\"October\",\n\t\"November\",\n\t\"December\"\n];\n\nvar seasons = {\n\twinter: {\n\t\tname: \"Winter\",\n\t\tstart: new Date(\"December 21\"),\n\t\tend: new Date (\"March 19\")\n\t},\n\tspring: {\n\t\tname: \"Spring\",\n\t\tstart: new Date(\"March 20\"),\n\t\tend: new Date(\"June 20\")\n\t},\n\tsummer: {\n\t\tname: \"Summer\",\n\t\tstart: new Date (\"June 21\"),\n\t\tend: new Date (\"September 21\")\n\t},\n\tfall: {\n\t\tname: \"Fall\",\n\t\tstart: new Date (\"September 22\"),\n\t\tend: new Date (\"December 20\")\n\t}\n};\n\nfunction shuffle(array) {\n\t// Adapted from https://bost.ocks.org/mike/shuffle/\n\n\tvar m = array.length, t, i;\n\n\t// While there remain elements to shuffle…\n\twhile (m) {\n\n\t\t// Pick a remaining element…\n\t\ti = Math.floor(Math.random() * m--);\n\n\t    // And swap it with the current element.\n\t    t = array[m];\n\t    array[m] = array[i];\n\t    array[i] = t;\n\t}\n\treturn array;\n}\n\n/*** End Sorters and Helpers ****/\n","function WorldMap(map) {\n  this.legend = [\n    { name: 'grass', symbol: 'g' },\n    { name: 'trees', symbol: 't' },\n    { name: 'house', symbol: 'H' },\n    { name: 'building-small', symbol: 'Bs' },\n    { name: 'building-medium', symbol: 'Bm' },\n    { name: 'building-large', symbol: 'Bl' },\n    { name: 'road', symbol: 'r' }\n  ];\n\n  this.map = map;\n}\n\nWorldMap.prototype.setMap = function(map) {\n  var newMap = [];\n\n  for (var i = 0; i < map.length; i ++) {\n    var newRow = [];\n    for (var j = 0; j < map[i].length; j ++) {\n      newRow.push(map[i][j]);\n    }\n    newMap.push(newRow);\n  }\n\n  this.map = newMap;\n}\n\nWorldMap.prototype.convertMapToString = function(map) {\n  var mapStr = '';\n\n  for (var i = 0; i < map.length; i ++) {\n    for (var j = 0; j < map[i].length; j ++) {\n      mapStr += map[i][j];\n    }\n\n    if (i < map.length -1) {\n      mapStr += '\\n';\n    }\n  }\n\n  return mapStr;\n}\n\nWorldMap.prototype.convertMapToImages = function(map) {\n  var newMapStr = \"<div class='graphicalMap'>\";\n\n  for (var i = 0; i < map.length; i ++) {\n    newMapStr += \"<div class='mapRow'>\";\n\n    for (var j = 0; j < map[i].length; j++) {\n      newMapStr += \"<img class='mapTile' src='./img/\" + map[i][j] + \".png'>\";\n    }\n\n    newMapStr += \"</div>\";\n  }\n\n  newMapStr += \"</div>\";\n\n  return newMapStr;\n}\n\nvar testMapArray =\n[\n  ['t', 't', 'g', 'g', 'g', 'g', 'g', 'r', 't', 't'],\n  ['t', 't', 'g', 'g', 'g', 'g', 'g', 'r', 'H', 't'],\n  ['t', 't', 't', 'g', 'g', 'g', 'g', 'r', 'H', 'g'],\n  ['t', 'g', 't', 'g', 'g', 'g', 'g', 'r', 'H', 'g'],\n  ['g', 'g', 'g', 'g', 't', 't', 'g', 'r', 'g', 'g'],\n  ['g', 'Bm', 'Bm', 'g', 'g', 'g', 'g', 'r', 'g', 'g'],\n  ['g', 'Bm', 'Bm', 'g', 'g', 'g', 'g', 'r', 'g', 'g'],\n  ['t', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r'],\n  ['t', 'r', 't', 't', 'g', 'H', 'g', 'H', 'g', 'g'],\n  ['g', 'r', 'g', 't', 't', 'g', 'g', 'g', 'g', 'g'],\n];\n\nvar testMap = new WorldMap(testMapArray);\nconsole.log(testMap);\nconsole.log('ASDF');\n\nconsole.log(testMap);\nconsole.log(testMap.convertMapToString(testMapArray));\n\nvar mapDisplayElement = $('.mapDisplay');\nvar mapAsString = testMap.convertMapToString(testMapArray);\n\nconsole.log(mapAsString);\n\nvar mapAsImages = testMap.convertMapToImages(testMapArray);\n","var Message = function(object) {\n\tthis.object = object;\n\tthis.date = date;\n\n\tconsole.log(this.object);\n\n\tif (this.object.message) {\n\t\tvar output = \"<div class='messageContainer'><span class='messageText'>\" + this.object.message + \"</span>\";\n\t\toutput += \"<div class='messageTimestamp'>(\" + this.date.toDateString() + \" \" + getHoursMinutesString(this.date) + \")</div><br />\";\n\t\toutput += \"</div>\";\n\n\t\tif (this.object.tooltip) {\n\t\t\toutput += \"<div class='tooltipOverlay'>\";\n\t\t\tfor (var i = 0; i < this.object.tooltip.length; i++) {\n\t\t\t\tfor (var item in this.object.tooltip[i]) {\n\t\t\t\t\toutput += this.object.tooltip[i][item] + \" \";\n\t\t\t\t}\n\t\t\t\toutput += \"<br />\";\n\t\t\t}\n\t\t\toutput += \"</div>\";\n\t\t}\n\n\t\t$(\"#messageWindow\").prepend(output);\n\t}\n}","/**** Progress Bar Class ****/\n\nvar ProgressBar = function(id, limit) {\n\tthis.id = id;\n\tthis.limit = limit;\n\tthis.ticksElapsed = 0;\n\tthis.ticksToLimit = limit / minutesPerTick;\n\n\tthis.fadeTimer = 500;\n\n\tconsole.log(this.id, this.limit);\n\n\tthis.HTML = \"<div class='progressBar \" + this.id + \"'><div class='fill'></div><div class='text'></div></div>\";\n}\n\nProgressBar.prototype.addToDOM = function() {\n\tvar target = this.id,\n\t\thtml = this.HTML;\n\t$('#' + target).html(html);\n}\n\n/* Game functions */\n\nvar updateProgressBars = function() {\n\tif (currentlyBreeding) {\n\t\tif (breedTimeElapsed < breedTimeRequired) {\n\t\t\tconsole.log(breedTimeElapsed, minutesPerTick);\n\t\t\t//Update breedTimeElapsed\n\t\t\tbreedTimeElapsed += minutesPerTick;\n\t\t\t//Update progress bar\n\t\t\t$('div.breedBar .fill').css(\"width\", (breedTimeElapsed / breedTimeRequired) * 300);\n\t\t\tvar timeLeft = breedTimeRequired - breedTimeElapsed,\n\t\t\t\tunits = \"minutes\";\n\t\t\tif (timeLeft > 1440) {\n\t\t\t\ttimeLeft = Math.floor(timeLeft / (60 * 24));\n\t\t\t\tunits = \"days\";\n\t\t\t} else if (timeLeft > 60) {\n\t\t\t\ttimeLeft = Math.floor(timeLeft / 60);\n\t\t\t\tunits = \"hours\";\n\t\t\t}\n\t\t\t$('div.breedBar .text').html(timeLeft + \" \" + units + \" left\");\n\t\t} else if (breedTimeElapsed >= breedTimeRequired) {\n\t\t\t$('div.breedBar .text').html(\"DONE!\");\n\t\t\tcurrentlyBreeding = false;\n\t\t\tspawnBabyRaccoons();\n\t\t\tbreedTimeElapsed = 0;\n\t\t\t// Trigger \"Done\" state for bar (maybe change text, highlight, fade out over 5s)\n\t\t\t// Remove bar\n\t\t}\n\t}\n}\n\n/***** End Progress Bar *****/","// Apply Names\n\nconst assignName = raccoon => {\n\t// Let's randomly assign a gender-neutral name 33% of the time\n\tconst nameGender = Math.random() < 0.33 ? \"neutral\" : raccoon.sex;\n\traccoon.name = getRandomFromArray(RaccoonNames[nameGender]);\n\n\treturn raccoon;\n}\n\nconst RaccoonNames = {\n\t\"male\": [\n\t\t\"Bilbo\",\n\t\t\"Jim-Bob\",\n\t\t\"Reginald Raccoon-VelJohnson\",\n\t\t\"Dudeface McBroson\",\n\t\t\"Steve \\\"Raccoon\\\" Buscemi\",\n\t\t\"Norbert\"\n\t],\n\t\"female\": [\n\t\t\"Racchel\",\n\t\t\"Araccoon Martell\",\n\t\t\"Gladys\",\n\t\t\"Elizabeth\",\n\t\t\"Josephine\",\n\t\t\"Neoprene\",\n\t\t\"Polyethylene\"\n\t],\n\t\"neutral\": [\n\t\t\"Raccquetball\",\n\t\t\"The shifty-eyed one\",\n\t\t\"The one who keeps stealing the cat's food\",\n\t\t\"The Notorious R.A.C.C.O.O.N.\",\n\t\t\"Rocky\",\n\t\t\"Trashfiend\",\n\t],\n\t\"titles\": [\n\t\t\"the Enlightened\",\n\t\t\"the Stinky\",\n\t\t\"of the Sacred Detritus\",\n\t\t\"the Discarded\"\n\t]\n};\n","var raccoons = [\n\t{\n\t\tid: 0,\n\t\tname: \"Raccoon1\",\n\t\tsex: \"male\",\n\t\tbirthday: new Date(\"December 19, 2016 6:00:00\"),\n\t\tpregnant: false,\n\t\tassignment: \"unassigned\",\n\t\talive: true\n\t},\n\t{\n\t\tid: 1,\n\t\tname: \"Raccoon2\",\n\t\tsex: \"female\",\n\t\tbirthday: new Date(\"December 19, 2016 6:00:00\"),\n\t\tpregnant: false,\n\t\tassignment: \"unassigned\",\n\t\talive: true\n\t},\n\t{\n\t\tid: 2,\n\t\tname: \"Raccoon3\",\n\t\tsex: \"male\",\n\t\tbirthday: new Date(\"December 19, 2016 6:00:00\"),\n\t\tpregnant: false,\n\t\tassignment: \"unassigned\",\n\t\talive: true\n\t},\n\t{\n\t\tid: 3,\n\t\tname: \"Raccoon4\",\n\t\tsex: \"female\",\n\t\tbirthday: new Date(\"December 19, 2016 6:00:00\"),\n\t\tpregnant: false,\n\t\tassignment: \"unassigned\",\n\t\talive: true\n\t},\n\t{\n\t\tid: 4,\n\t\tname: \"Raccoon5\",\n\t\tsex: \"female\",\n\t\tbirthday: new Date(\"December 19, 2016 6:00:00\"),\n\t\tpregnant: false,\n\t\tassignment: \"unassigned\",\n\t\talive: true\n\t}\n];","var startGame = function() {\n\tdefineUIElements();\n\tprepUI();\n\tupdateStatsPane();\n\tupdateActionsPane();\n\ttick();\n}\n\nvar defineUIElements = function () {\n\t$statsPane = \t\t\t$('.statsOutput'),\n\t$statNumRaccoons = \t\t$('.numRaccoons .stat'),\n\t$expandedNumRaccoons = \t$('.numRaccoons .expandedStat'),\n\t$statNumHumans = \t\t$('.numHumans .stat'),\n\t$statSeason = \t\t\t$('.season .stat'),\n\t$statDate = \t\t\t$('.date .stat'),\n\t$statTime = \t\t\t$('.time .stat'),\n\t$statFood =\t\t\t\t$('.food .stat'),\n\t$statTwigs = \t\t\t$('.twigs .stat');\n\n\t$assignmentsPane = \t\t$('.assignments');\n\n\t$actionsPane = $('.actions');\n\tconsole.log($actionsPane);\n}\n\nvar prepUI = function() {\n\t$('div.progressBar').hide();\n\n\t$('input.speedControl').val(minutesPerTick);\n\t$('span.speedControl.display').html(minutesPerTick + ' minutes per tick');\n\n\t$('.numUnassigned').html(updateAllocationLabels(\"unassigned\"));\n}\n\nvar updateStatsPane = function() {\n\t$statNumRaccoons.html\t\t( getTotalRaccoons() );\n\t$expandedNumRaccoons.html \t( \"Adults: \" + getAdultRaccoons().length + \" (\" +\n\t\t\t\t\t\t\t\t  \tgetAdultFemaleRaccoons().length + \" females, \" + getAdultMaleRaccoons().length + \" males)<br />\" +\n\t\t\t\t\t\t\t\t  \"Children: \" + getChildRaccoons().length + \" (\" +\n\t\t\t\t\t\t\t\t  \tgetChildFemaleRaccoons().length + \" females, \" + getChildMaleRaccoons().length + \" males)<br />\" );\n\t$statNumHumans.html\t\t\t( humans );\n\t$statSeason.html\t\t\t( getSeason(date) );\n\t$statDate.html\t\t\t\t( getMonthName(date.getMonth()) + \"  \" + date.getDate() + \", \" + date.getFullYear() );\n\t$statTime.html\t\t\t\t( getHoursMinutesString(date) );\n\t$statFood.html\t\t\t\t( foodStores.toFixed(1) + \" | \" + getRateOfChangeFood() + \"/tick\");\n\t$statTwigs.html\t\t\t\t( twigStores.toFixed(1) + \" | \" + getRateOfChangeTwigs() + \"/tick\");\n}\n\nvar updateActionsPane = function() {\n\t/*\n\n\t1. Check if breeding is possible\n\n\tFORMULA:\n\t- Season must be WINTER\n\t- Food stores must be >= raccoons * 2\n\t- Must not have bred this season\n\n\t*/\n\n\tif (currentSeason === \"Winter\" && !bredThisYear) {\n\t\t// console.log (\"FOOD:\", foodStores, \"RACCOONS:\", getAdultRaccoons() );\n\t\tif (foodStores >= getAdultRaccoons().length * 2) {\n\t\t\t// Allow \"breed\" button to be clicked\n\t\t\t$(\"#breedBtn\").prop(\"disabled\", false);\n\t\t}\n\t} else {\n\t\t// Gray out \"breed\" button\n\t\t$(\"#breedBtn\").prop(\"disabled\", true);\n\t}\n}\n\nvar updateDate = function() {\n\t// Store the last record of the current season for comparison's sake\n\tvar oldSeason = getSeason(date);\n\n\tdate = new Date(date.getTime() + 60000 * minutesPerTick); // Increment one minute per tick\n\tcurrentSeason = getSeason(date);\n\n\tif (oldSeason !== currentSeason) {\n\t\t// Season has changed; check for any season-dependent events\n\t\tcheckSeasonChangeEvents(currentSeason);\n\t}\n}\n\nvar updateHumanPopulation = function() {\n\thumans += humanGrowthRate * minutesPerTick;\n}\n\nvar updateStores = function() {\n\t// Update this so it just gets all assignments and iterates through each to update the correct var\n\tvar assigned = getAssignments();\n\n\t// // Don't do anything if nobody's doin' nothin', you know?\n\t// if (assigned[\"unassigned\"] === getTotalRaccoons()) return;\n\n\t// var assignments = Object.keys(assigned);\n\n\t// for (var assignment in assignments) {\n\t// \tif (assignment === \"gatherFood\") {\n\t// \t\tfoodStores += 0.001 * minutesPerTick * getAssignments(assignment).length;\n\t// \t} else if (assignment === \"gatherTwigs\") {\n\t// \t\ttwigStores += 0.001 * minutesPerTick * getAssignments(assignment).length;\n\t// \t}\n\t// }\n\n\tif (getAssignments('gatherFood').length > 0) {\n\t\tfoodStores += foodGatherRate * minutesPerTick * getAssignments('gatherFood').length;\n\t}\n\tif (getAssignments('gatherTwigs').length > 0) {\n\t\ttwigStores += twigsGatherRate * minutesPerTick * getAssignments('gatherTwigs').length;\n\t}\n\n\t// Subtract food based on how many raccoons are alive\n\tfoodStores -= 0.0001 * minutesPerTick * getTotalRaccoons();\n}\n\nvar checkSeasonChangeEvents = function(season) {\n\tvar seasonMsg = new Message({\n\t\tmessage: \"It is now \" + season + \".\"\n\t});\n\n\tif (season === \"Winter\") {\n\t\t// Reset whether raccoons have bred this season\n\t\tbredThisYear = false;\n\t}\n}\n\nvar tick = function() {\n\t// Increment all the things\n\twindow.setTimeout(function() {\n\t\t// TODO: This model is inefficient. Each pane should\n\t\t// only be updated when an event fires that changes its\n\t\t// value. Otherwise, this doesn't scale for performance.\n\t\t// See the updateAllocationLabels() method in allocate.js\n\t\t// for an example.\n\n\t\tupdateDate();\n\t\tupdateHumanPopulation();\n\t\tupdateStores();\n\t\tupdateStatsPane();\n\t\tupdateActionsPane();\n\t\tupdateProgressBars();\n\n\t\ttick();\n\t}, tickRate);\n}\n\n$(document).ready(function() {\n\t$(\"#breedBtn\").click(function() {\n\t\tbreedRaccoons();\n\t});\n\n\t$(\".statExpander\").click(function(e) {\n\t\tif ($(e.target).html() === '[v]') {\n\t\t\t$(e.target).html('[^]');\n\t\t} else {\n\t\t\t$(e.target).html('[v]');\n\t\t}\n\t\tvar chosenStat = $(e.target).data('stat');\n\t\tvar divToExpand = $('.expandedStat[data-stat=' + chosenStat + ']');\n\t\t$(divToExpand).toggle();\n\t})\n\n\t$(\"input.speedControl\").change(function() {\n\t\tminutesPerTick = Number($(\".speedControl\").val());\n\t\t$(\"span.speedControl.display\").html(minutesPerTick + \" minutes per tick\");\n\t});\n\n\t$(\"div.assignments button\").on(\"click\", function(e) {\n\t\tallocate(e);\n\t});\n\n\t$(\".mapDisplay\").html(mapAsImages);\n\n\t// TODO: Add a listener here for the tooltip expander/toggle/whatever it ends up being\n\n\tstartGame();\n});\n"],"sourceRoot":"/source/"}